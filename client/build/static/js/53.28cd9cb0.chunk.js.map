{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"mGAAA,ojBAAIA,EAAoB,qBACpBC,EAAqB,qBAErBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAIfC,EAAsB,WACtBH,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAEfE,EAAsB,SAAUC,GAChCC,EAAqBD,GAChBA,EAAIE,iBAGTN,EAAwBO,EAAmBH,EAAIE,gBAC/CF,EAAIE,eAAeE,SAAW,WAC1BC,EAAqBL,GACjBM,KAAqBC,EAAkBP,GACvCQ,EAAgBR,GAEXS,EAAiBT,IACtBU,EAAiBV,MASzBC,EAAuB,SAAUD,GACjCA,EAAIW,iBAAiB,mBAAmB,SAAUC,GAAM,OAAOJ,EAAgBR,EAAKY,MACpFZ,EAAIW,iBAAiB,mBAAmB,WAAc,OAAOD,EAAiBV,OAE9EQ,EAAkB,SAAUR,EAAKY,GACjCC,EAAsBb,EAAKY,GAC3Bf,GAAe,GAEfa,EAAmB,SAAUV,GAC7Bc,EAAuBd,GACvBH,GAAe,GAcfS,EAAkB,WAClB,IAAIS,GAA0BpB,EAAuBqB,OAASpB,EAAsBoB,QAAUpB,EAAsBqB,MACpH,OAASpB,GACLF,EAAuBuB,QAAUtB,EAAsBsB,OACvDH,EA7DiB,KAmErBR,EAAoB,SAAUP,GAC9B,OAAOH,IAAiBY,EAAiBT,IAQzCS,EAAmB,SAAUT,GAC7B,OAAOH,GAAgBD,EAAsBoB,SAAWhB,EAAImB,aAK5DN,EAAwB,SAAUb,EAAKoB,GACvC,IAAIC,EAAiBD,EAAWA,EAASC,eAAiBrB,EAAImB,YAAcvB,EAAsBoB,OAC9FJ,EAAK,IAAIU,YAAY7B,EAAmB,CACxC8B,OAAQ,CAAEF,eAAgBA,KAE9BrB,EAAIwB,cAAcZ,IAKlBE,EAAyB,SAAUd,GACnC,IAAIY,EAAK,IAAIU,YAAY5B,GACzBM,EAAIwB,cAAcZ,IAQlBP,EAAuB,SAAUL,GACjCL,EAAyB8B,OAAOC,OAAO,GAAI9B,GAC3CA,EAAwBO,EAAmBH,EAAIE,iBAM/CC,EAAqB,SAAUD,GAC/B,MAAO,CACHgB,MAAOS,KAAKC,MAAM1B,EAAegB,OACjCF,OAAQW,KAAKC,MAAM1B,EAAec,QAClCa,UAAW3B,EAAe2B,UAC1BC,WAAY5B,EAAe4B,WAC3BC,QAAS7B,EAAe6B,QACxBC,SAAU9B,EAAe8B,SACzBf,MAAOf,EAAee","file":"static/js/53.28cd9cb0.chunk.js","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar keyboardOpen = false;\n/**\n * This is only used for tests\n */\nvar resetKeyboardAssist = function () {\n    previousVisualViewport = {};\n    currentVisualViewport = {};\n    keyboardOpen = false;\n};\nvar startKeyboardAssist = function (win) {\n    startNativeListeners(win);\n    if (!win.visualViewport) {\n        return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    win.visualViewport.onresize = function () {\n        trackViewportChanges(win);\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\n            setKeyboardOpen(win);\n        }\n        else if (keyboardDidClose(win)) {\n            setKeyboardClose(win);\n        }\n    };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nvar startNativeListeners = function (win) {\n    win.addEventListener('keyboardDidShow', function (ev) { return setKeyboardOpen(win, ev); });\n    win.addEventListener('keyboardDidHide', function () { return setKeyboardClose(win); });\n};\nvar setKeyboardOpen = function (win, ev) {\n    fireKeyboardOpenEvent(win, ev);\n    keyboardOpen = true;\n};\nvar setKeyboardClose = function (win) {\n    fireKeyboardCloseEvent(win);\n    keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nvar keyboardDidOpen = function () {\n    var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n    return (!keyboardOpen &&\n        previousVisualViewport.width === currentVisualViewport.width &&\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nvar keyboardDidResize = function (win) {\n    return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nvar keyboardDidClose = function (win) {\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nvar fireKeyboardOpenEvent = function (win, nativeEv) {\n    var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n    var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n        detail: { keyboardHeight: keyboardHeight }\n    });\n    win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nvar fireKeyboardCloseEvent = function (win) {\n    var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n    win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nvar trackViewportChanges = function (win) {\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nvar copyVisualViewport = function (visualViewport) {\n    return {\n        width: Math.round(visualViewport.width),\n        height: Math.round(visualViewport.height),\n        offsetTop: visualViewport.offsetTop,\n        offsetLeft: visualViewport.offsetLeft,\n        pageTop: visualViewport.pageTop,\n        pageLeft: visualViewport.pageLeft,\n        scale: visualViewport.scale\n    };\n};\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"],"sourceRoot":""}